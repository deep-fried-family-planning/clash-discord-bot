/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    '/clans/{clanTag}/currentwar/leaguegroup': {
        parameters: {
            query? : never;
            header?: never;
            path?  : never;
            cookie?: never;
        };
        /**
         * Retrieve information about clan's current clan war league group
         * @description Retrieve information about clan's current clan war league group
         */
        get     : operations['getClanWarLeagueGroup'];
        put?    : never;
        post?   : never;
        delete? : never;
        options?: never;
        head?   : never;
        patch?  : never;
        trace?  : never;
    };
    '/players/{playerTag}': {
        parameters: {
            query? : never;
            header?: never;
            path?  : never;
            cookie?: never;
        };
        /**
         * Get player information
         * @description Get information about a single player by player tag. Player tags can be found either in game or by from clan member lists. Note that player tags start with hash character '#' and that needs to be URL-encoded properly to work in URL, so for example player tag '#2ABC' would become '%232ABC' in the URL.
         *
         */
        get     : operations['getPlayer'];
        put?    : never;
        post?   : never;
        delete? : never;
        options?: never;
        head?   : never;
        patch?  : never;
        trace?  : never;
    };
    '/capitalleagues': {
        parameters: {
            query? : never;
            header?: never;
            path?  : never;
            cookie?: never;
        };
        /**
         * List capital leagues
         * @description List capital leagues
         */
        get     : operations['getCapitalLeagues'];
        put?    : never;
        post?   : never;
        delete? : never;
        options?: never;
        head?   : never;
        patch?  : never;
        trace?  : never;
    };
    '/locations/{locationId}/rankings/clans': {
        parameters: {
            query? : never;
            header?: never;
            path?  : never;
            cookie?: never;
        };
        /**
         * Get clan rankings for a specific location
         * @description Get clan rankings for a specific location
         */
        get     : operations['getClanRanking'];
        put?    : never;
        post?   : never;
        delete? : never;
        options?: never;
        head?   : never;
        patch?  : never;
        trace?  : never;
    };
    '/clanwarleagues/wars/{warTag}': {
        parameters: {
            query? : never;
            header?: never;
            path?  : never;
            cookie?: never;
        };
        /**
         * Retrieve information about individual clan war league war
         * @description Retrieve information about individual clan war league war
         */
        get     : operations['getClanWarLeagueWar'];
        put?    : never;
        post?   : never;
        delete? : never;
        options?: never;
        head?   : never;
        patch?  : never;
        trace?  : never;
    };
    '/goldpass/seasons/current': {
        parameters: {
            query? : never;
            header?: never;
            path?  : never;
            cookie?: never;
        };
        /**
         * Get information about the current gold pass season.
         * @description Get information about the current gold pass season.
         */
        get     : operations['getCurrentGoldPassSeason'];
        put?    : never;
        post?   : never;
        delete? : never;
        options?: never;
        head?   : never;
        patch?  : never;
        trace?  : never;
    };
    '/clans/{clanTag}/warlog': {
        parameters: {
            query? : never;
            header?: never;
            path?  : never;
            cookie?: never;
        };
        /**
         * Retrieve clan's clan war log
         * @description Retrieve clan's clan war log
         */
        get     : operations['getClanWarLog'];
        put?    : never;
        post?   : never;
        delete? : never;
        options?: never;
        head?   : never;
        patch?  : never;
        trace?  : never;
    };
    '/leagues': {
        parameters: {
            query? : never;
            header?: never;
            path?  : never;
            cookie?: never;
        };
        /**
         * List leagues
         * @description List leagues
         */
        get     : operations['getLeagues'];
        put?    : never;
        post?   : never;
        delete? : never;
        options?: never;
        head?   : never;
        patch?  : never;
        trace?  : never;
    };
    '/locations/{locationId}/rankings/players': {
        parameters: {
            query? : never;
            header?: never;
            path?  : never;
            cookie?: never;
        };
        /**
         * Get player rankings for a specific location
         * @description Get player rankings for a specific location
         */
        get     : operations['getPlayerRanking'];
        put?    : never;
        post?   : never;
        delete? : never;
        options?: never;
        head?   : never;
        patch?  : never;
        trace?  : never;
    };
    '/leagues/{leagueId}/seasons/{seasonId}': {
        parameters: {
            query? : never;
            header?: never;
            path?  : never;
            cookie?: never;
        };
        /**
         * Get league season rankings
         * @description Get league season rankings. Note that league season information is available only for Legend League.
         *
         */
        get     : operations['getLeagueSeasonRankings'];
        put?    : never;
        post?   : never;
        delete? : never;
        options?: never;
        head?   : never;
        patch?  : never;
        trace?  : never;
    };
    '/capitalleagues/{leagueId}': {
        parameters: {
            query? : never;
            header?: never;
            path?  : never;
            cookie?: never;
        };
        /**
         * Get capital league information
         * @description Get capital league information
         */
        get     : operations['getCapitalLeague'];
        put?    : never;
        post?   : never;
        delete? : never;
        options?: never;
        head?   : never;
        patch?  : never;
        trace?  : never;
    };
    '/clans': {
        parameters: {
            query? : never;
            header?: never;
            path?  : never;
            cookie?: never;
        };
        /**
         * Search clans
         * @description Search all clans by name and/or filtering the results using various criteria. At least one filtering criteria must be defined and if name is used as part of search, it is required to be at least three characters long. It is not possible to specify ordering for results so clients should not rely on any specific ordering as that may change in the future releases of the API.
         *
         */
        get     : operations['searchClans'];
        put?    : never;
        post?   : never;
        delete? : never;
        options?: never;
        head?   : never;
        patch?  : never;
        trace?  : never;
    };
    '/builderbaseleagues/{leagueId}': {
        parameters: {
            query? : never;
            header?: never;
            path?  : never;
            cookie?: never;
        };
        /**
         * Get Builder Base league information
         * @description Get Builder Base league information
         */
        get     : operations['getBuilderBaseLeague'];
        put?    : never;
        post?   : never;
        delete? : never;
        options?: never;
        head?   : never;
        patch?  : never;
        trace?  : never;
    };
    '/locations/{locationId}/rankings/players-builder-base': {
        parameters: {
            query? : never;
            header?: never;
            path?  : never;
            cookie?: never;
        };
        /**
         * Get player Builder Base rankings for a specific location
         * @description Get player Builder Base rankings for a specific location
         */
        get     : operations['getPlayerBuilderBaseRanking'];
        put?    : never;
        post?   : never;
        delete? : never;
        options?: never;
        head?   : never;
        patch?  : never;
        trace?  : never;
    };
    '/locations/{locationId}/rankings/clans-builder-base': {
        parameters: {
            query? : never;
            header?: never;
            path?  : never;
            cookie?: never;
        };
        /**
         * Get clan Builder Base rankings for a specific location
         * @description Get clan Builder Base rankings for a specific location
         */
        get     : operations['getClanBuilderBaseRanking'];
        put?    : never;
        post?   : never;
        delete? : never;
        options?: never;
        head?   : never;
        patch?  : never;
        trace?  : never;
    };
    '/clans/{clanTag}/currentwar': {
        parameters: {
            query? : never;
            header?: never;
            path?  : never;
            cookie?: never;
        };
        /**
         * Retrieve information about clan's current clan war
         * @description Retrieve information about clan's current clan war
         */
        get     : operations['getCurrentWar'];
        put?    : never;
        post?   : never;
        delete? : never;
        options?: never;
        head?   : never;
        patch?  : never;
        trace?  : never;
    };
    '/clans/{clanTag}': {
        parameters: {
            query? : never;
            header?: never;
            path?  : never;
            cookie?: never;
        };
        /**
         * Get clan information
         * @description Get information about a single clan by clan tag. Clan tags can be found using clan search operation. Note that clan tags start with hash character '#' and that needs to be URL-encoded properly to work in URL, so for example clan tag '#2ABC' would become '%232ABC' in the URL.
         *
         */
        get     : operations['getClan'];
        put?    : never;
        post?   : never;
        delete? : never;
        options?: never;
        head?   : never;
        patch?  : never;
        trace?  : never;
    };
    '/players/{playerTag}/verifytoken': {
        parameters: {
            query? : never;
            header?: never;
            path?  : never;
            cookie?: never;
        };
        get?    : never;
        put?    : never;
        /**
         * Verify player API token that can be found from the game settings.
         * @description Verify player API token that can be found from the game settings. This API call can be used to check that players own the game accounts they claim to own as they need to provide the one-time use API token that exists inside the game.
         *
         */
        post    : operations['verifyToken'];
        delete? : never;
        options?: never;
        head?   : never;
        patch?  : never;
        trace?  : never;
    };
    '/builderbaseleagues': {
        parameters: {
            query? : never;
            header?: never;
            path?  : never;
            cookie?: never;
        };
        /**
         * List Builder Base leagues
         * @description List Builder Base leagues
         */
        get     : operations['getBuilderBaseLeagues'];
        put?    : never;
        post?   : never;
        delete? : never;
        options?: never;
        head?   : never;
        patch?  : never;
        trace?  : never;
    };
    '/leagues/{leagueId}': {
        parameters: {
            query? : never;
            header?: never;
            path?  : never;
            cookie?: never;
        };
        /**
         * Get league information
         * @description Get league information
         */
        get     : operations['getLeague'];
        put?    : never;
        post?   : never;
        delete? : never;
        options?: never;
        head?   : never;
        patch?  : never;
        trace?  : never;
    };
    '/leagues/{leagueId}/seasons': {
        parameters: {
            query? : never;
            header?: never;
            path?  : never;
            cookie?: never;
        };
        /**
         * Get league seasons
         * @description Get league seasons. Note that league season information is available only for Legend League.
         *
         */
        get     : operations['getLeagueSeasons'];
        put?    : never;
        post?   : never;
        delete? : never;
        options?: never;
        head?   : never;
        patch?  : never;
        trace?  : never;
    };
    '/clans/{clanTag}/members': {
        parameters: {
            query? : never;
            header?: never;
            path?  : never;
            cookie?: never;
        };
        /**
         * List clan members
         * @description List clan members.
         */
        get     : operations['getClanMembers'];
        put?    : never;
        post?   : never;
        delete? : never;
        options?: never;
        head?   : never;
        patch?  : never;
        trace?  : never;
    };
    '/locations': {
        parameters: {
            query? : never;
            header?: never;
            path?  : never;
            cookie?: never;
        };
        /**
         * List locations
         * @description List locations
         */
        get     : operations['getLocations'];
        put?    : never;
        post?   : never;
        delete? : never;
        options?: never;
        head?   : never;
        patch?  : never;
        trace?  : never;
    };
    '/labels/players': {
        parameters: {
            query? : never;
            header?: never;
            path?  : never;
            cookie?: never;
        };
        /**
         * List player labels
         * @description List player labels
         */
        get     : operations['getPlayerLabels'];
        put?    : never;
        post?   : never;
        delete? : never;
        options?: never;
        head?   : never;
        patch?  : never;
        trace?  : never;
    };
    '/warleagues/{leagueId}': {
        parameters: {
            query? : never;
            header?: never;
            path?  : never;
            cookie?: never;
        };
        /**
         * Get war league information
         * @description Get war league information
         */
        get     : operations['getWarLeague'];
        put?    : never;
        post?   : never;
        delete? : never;
        options?: never;
        head?   : never;
        patch?  : never;
        trace?  : never;
    };
    '/locations/{locationId}/rankings/capitals': {
        parameters: {
            query? : never;
            header?: never;
            path?  : never;
            cookie?: never;
        };
        /**
         * Get capital rankings for a specific location
         * @description Get capital rankings for a specific location
         */
        get     : operations['getClanCapitalRanking'];
        put?    : never;
        post?   : never;
        delete? : never;
        options?: never;
        head?   : never;
        patch?  : never;
        trace?  : never;
    };
    '/locations/{locationId}': {
        parameters: {
            query? : never;
            header?: never;
            path?  : never;
            cookie?: never;
        };
        /**
         * Get location information
         * @description Get information about specific location
         */
        get     : operations['getLocation'];
        put?    : never;
        post?   : never;
        delete? : never;
        options?: never;
        head?   : never;
        patch?  : never;
        trace?  : never;
    };
    '/clans/{clanTag}/capitalraidseasons': {
        parameters: {
            query? : never;
            header?: never;
            path?  : never;
            cookie?: never;
        };
        /**
         * Retrieve clan's capital raid seasons
         * @description Retrieve clan's capital raid seasons
         */
        get     : operations['getCapitalRaidSeasons'];
        put?    : never;
        post?   : never;
        delete? : never;
        options?: never;
        head?   : never;
        patch?  : never;
        trace?  : never;
    };
    '/labels/clans': {
        parameters: {
            query? : never;
            header?: never;
            path?  : never;
            cookie?: never;
        };
        /**
         * List clan labels
         * @description List clan labels
         */
        get     : operations['getClanLabels'];
        put?    : never;
        post?   : never;
        delete? : never;
        options?: never;
        head?   : never;
        patch?  : never;
        trace?  : never;
    };
    '/warleagues': {
        parameters: {
            query? : never;
            header?: never;
            path?  : never;
            cookie?: never;
        };
        /**
         * List war leagues
         * @description List war leagues
         */
        get     : operations['getWarLeagues'];
        put?    : never;
        post?   : never;
        delete? : never;
        options?: never;
        head?   : never;
        patch?  : never;
        trace?  : never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        WarLeagueList: components['schemas']['WarLeague'][];
        WarLeague: {
            name?: components['schemas']['JsonLocalizedName'];
            id?  : number;
        };
        JsonLocalizedName: Record<string, never>;
        ServiceVersion: {
            major?  : number;
            minor?  : number;
            content?: number;
        };
        LabelList: components['schemas']['Label'][];
        Label: {
            name?    : components['schemas']['JsonLocalizedName'];
            id?      : number;
            iconUrls?: Record<string, never>;
        };
        ClanCapitalRaidSeasons: components['schemas']['ClanCapitalRaidSeason'][];
        ClanCapitalRaidSeason: {
            attackLog?              : components['schemas']['ClanCapitalRaidSeasonAttackLogList'];
            defenseLog?             : components['schemas']['ClanCapitalRaidSeasonDefenseLogList'];
            state?                  : string;
            startTime?              : string;
            endTime?                : string;
            capitalTotalLoot?       : number;
            raidsCompleted?         : number;
            totalAttacks?           : number;
            enemyDistrictsDestroyed?: number;
            offensiveReward?        : number;
            defensiveReward?        : number;
            members?                : components['schemas']['ClanCapitalRaidSeasonMemberList'];
        };
        ClanCapitalRaidSeasonMemberList: components['schemas']['ClanCapitalRaidSeasonMember'][];
        ClanCapitalRaidSeasonMember: {
            tag?                   : string;
            name?                  : string;
            attacks?               : number;
            attackLimit?           : number;
            bonusAttackLimit?      : number;
            capitalResourcesLooted?: number;
        };
        ClanCapitalRaidSeasonDefenseLogList : components['schemas']['ClanCapitalRaidSeasonDefenseLogEntry'][];
        ClanCapitalRaidSeasonDefenseLogEntry: {
            attacker?          : components['schemas']['ClanCapitalRaidSeasonClanInfo'];
            attackCount?       : number;
            districtCount?     : number;
            districtsDestroyed?: number;
            districts?         : components['schemas']['ClanCapitalRaidSeasonDistrictList'];
        };
        ClanCapitalRaidSeasonDistrictList: components['schemas']['ClanCapitalRaidSeasonDistrict'][];
        ClanCapitalRaidSeasonDistrict: {
            stars?             : number;
            name?              : components['schemas']['JsonLocalizedName'];
            id?                : number;
            destructionPercent?: number;
            attackCount?       : number;
            totalLooted?       : number;
            attacks?           : components['schemas']['ClanCapitalRaidSeasonAttackList'];
            districtHallLevel? : number;
        };
        ClanCapitalRaidSeasonAttackList: components['schemas']['ClanCapitalRaidSeasonAttack'][];
        ClanCapitalRaidSeasonAttack: {
            attacker?          : components['schemas']['ClanCapitalRaidSeasonAttacker'];
            destructionPercent?: number;
            stars?             : number;
        };
        ClanCapitalRaidSeasonAttacker: {
            tag? : string;
            name?: string;
        };
        ClanCapitalRaidSeasonClanInfo: {
            tag?      : string;
            name?     : string;
            level?    : number;
            badgeUrls?: Record<string, never>;
        };
        ClanCapitalRaidSeasonAttackLogList : components['schemas']['ClanCapitalRaidSeasonAttackLogEntry'][];
        ClanCapitalRaidSeasonAttackLogEntry: {
            defender?          : components['schemas']['ClanCapitalRaidSeasonClanInfo'];
            attackCount?       : number;
            districtCount?     : number;
            districtsDestroyed?: number;
            districts?         : components['schemas']['ClanCapitalRaidSeasonDistrictList'];
        };
        Location: {
            localizedName?: string;
            id?           : number;
            name?         : string;
            isCountry?    : boolean;
            countryCode?  : string;
        };
        Replay: {
            replayData?: components['schemas']['JsonNode'];
            replayTag? : string;
        };
        JsonNode              : Record<string, never>;
        ClanCapitalRankingList: components['schemas']['ClanCapitalRanking'][];
        ClanCapitalRanking: {
            clanCapitalPoints?: number;
            clanPoints?       : number;
        };
        WarStatusList: components['schemas']['WarStatus'][];
        WarStatus: {
            clanTag?     : string;
            statusCode?  : number;
            enemyClanTag?: string;
            /** @enum {string} */
            warState?    : 'CLAN_NOT_FOUND' | 'ACCESS_DENIED' | 'NOT_IN_WAR' | 'IN_MATCHMAKING' | 'ENTER_WAR' | 'MATCHED' | 'PREPARATION' | 'WAR' | 'IN_WAR' | 'ENDED';
            timestamp?   : string;
        };
        LocationList  : components['schemas']['Location'][];
        ClanMemberList: components['schemas']['ClanMember'][];
        ClanMember: {
            league?             : components['schemas']['League'];
            builderBaseLeague?  : components['schemas']['BuilderBaseLeague'];
            tag?                : string;
            name?               : string;
            /** @enum {string} */
            role?               : 'NOT_MEMBER' | 'MEMBER' | 'LEADER' | 'ADMIN' | 'COLEADER';
            townHallLevel?      : number;
            expLevel?           : number;
            clanRank?           : number;
            previousClanRank?   : number;
            donations?          : number;
            donationsReceived?  : number;
            trophies?           : number;
            builderBaseTrophies?: number;
            playerHouse?        : components['schemas']['PlayerHouse'];
        };
        PlayerHouse: {
            elements?: components['schemas']['PlayerHouseElementList'];
        };
        PlayerHouseElementList: components['schemas']['PlayerHouseElement'][];
        PlayerHouseElement: {
            id?  : number;
            /** @enum {string} */
            type?: 'GROUND' | 'ROOF' | 'FOOT' | 'DECO';
        };
        BuilderBaseLeague: {
            name?: components['schemas']['JsonLocalizedName'];
            id?  : number;
        };
        League: {
            name?    : components['schemas']['JsonLocalizedName'];
            id?      : number;
            iconUrls?: Record<string, never>;
        };
        LeagueSeasonList: components['schemas']['LeagueSeason'][];
        LeagueSeason: {
            id?: string;
        };
        BuilderBaseLeagueList: components['schemas']['BuilderBaseLeague'][];
        VerifyTokenRequest: {
            token?: string;
        };
        VerifyTokenResponse: {
            tag?   : string;
            token? : string;
            status?: string;
        };
        Clan: {
            warLeague?                  : components['schemas']['WarLeague'];
            capitalLeague?              : components['schemas']['CapitalLeague'];
            memberList?                 : components['schemas']['ClanMemberList'];
            tag?                        : string;
            clanCapitalPoints?          : number;
            requiredTrophies?           : number;
            requiredBuilderBaseTrophies?: number;
            requiredTownhallLevel?      : number;
            isFamilyFriendly?           : boolean;
            clanLevel?                  : number;
            warWinStreak?               : number;
            warWins?                    : number;
            warTies?                    : number;
            warLosses?                  : number;
            clanPoints?                 : number;
            clanBuilderBasePoints?      : number;
            /** @enum {string} */
            warFrequency?               : 'UNKNOWN' | 'ALWAYS' | 'MORE_THAN_ONCE_PER_WEEK' | 'ONCE_PER_WEEK' | 'LESS_THAN_ONCE_PER_WEEK' | 'NEVER' | 'ANY';
            isWarLogPublic?             : boolean;
            chatLanguage?               : components['schemas']['Language'];
            labels?                     : components['schemas']['LabelList'];
            name?                       : string;
            location?                   : components['schemas']['Location'];
            /** @enum {string} */
            type?                       : 'OPEN' | 'INVITE_ONLY' | 'CLOSED';
            members?                    : number;
            description?                : string;
            clanCapital?                : components['schemas']['ClanCapital'];
            badgeUrls?                  : Record<string, never>;
        };
        ClanCapital: {
            capitalHallLevel?: number;
            districts?       : components['schemas']['ClanDistrictDataList'];
        };
        ClanDistrictDataList: components['schemas']['ClanDistrictData'][];
        ClanDistrictData: {
            name?             : components['schemas']['JsonLocalizedName'];
            id?               : number;
            districtHallLevel?: number;
        };
        Language: {
            name?        : string;
            id?          : number;
            languageCode?: string;
        };
        CapitalLeague: {
            name?: components['schemas']['JsonLocalizedName'];
            id?  : number;
        };
        ClanWar: {
            clan?                : components['schemas']['WarClan'];
            opponent?            : components['schemas']['WarClan'];
            teamSize?            : number;
            attacksPerMember?    : number;
            /** @enum {string} */
            battleModifier?      : 'NONE' | 'HARD_MODE';
            startTime?           : string;
            /** @enum {string} */
            state?               : 'CLAN_NOT_FOUND' | 'ACCESS_DENIED' | 'NOT_IN_WAR' | 'IN_MATCHMAKING' | 'ENTER_WAR' | 'MATCHED' | 'PREPARATION' | 'WAR' | 'IN_WAR' | 'ENDED';
            endTime?             : string;
            preparationStartTime?: string;
        };
        WarClan: {
            destructionPercentage?: components['schemas']['Float'];
            tag?                  : string;
            name?                 : string;
            badgeUrls?            : Record<string, never>;
            clanLevel?            : number;
            attacks?              : number;
            stars?                : number;
            expEarned?            : number;
            members?              : components['schemas']['ClanWarMemberList'];
        };
        ClanWarMemberList: components['schemas']['ClanWarMember'][];
        ClanWarMember: {
            tag?               : string;
            name?              : string;
            mapPosition?       : number;
            townhallLevel?     : number;
            opponentAttacks?   : number;
            bestOpponentAttack?: components['schemas']['ClanWarAttack'];
            attacks?           : components['schemas']['ClanWarAttackList'];
        };
        ClanWarAttackList: components['schemas']['ClanWarAttack'][];
        ClanWarAttack: {
            order?                : number;
            attackerTag?          : string;
            defenderTag?          : string;
            stars?                : number;
            destructionPercentage?: number;
            duration?             : number;
        };
        Float                     : Record<string, never>;
        ClanBuilderBaseRankingList: components['schemas']['ClanBuilderBaseRanking'][];
        ClanBuilderBaseRanking: {
            clanPoints?           : number;
            clanBuilderBasePoints?: number;
        };
        PlayerBuilderBaseRankingList: components['schemas']['PlayerBuilderBaseRanking'][];
        PlayerBuilderBaseRanking: {
            builderBaseLeague?  : components['schemas']['BuilderBaseLeague'];
            clan?               : components['schemas']['PlayerRankingClan'];
            tag?                : string;
            name?               : string;
            expLevel?           : number;
            rank?               : number;
            previousRank?       : number;
            builderBaseTrophies?: number;
        };
        PlayerRankingClan: {
            tag?      : string;
            name?     : string;
            badgeUrls?: Record<string, never>;
        };
        ClanList         : components['schemas']['Clan'][];
        PlayerRankingList: components['schemas']['PlayerRanking'][];
        PlayerRanking: {
            league?      : components['schemas']['League'];
            clan?        : components['schemas']['PlayerRankingClan'];
            attackWins?  : number;
            defenseWins? : number;
            tag?         : string;
            name?        : string;
            expLevel?    : number;
            rank?        : number;
            previousRank?: number;
            trophies?    : number;
        };
        LeagueList     : components['schemas']['League'][];
        ClanWarLog     : components['schemas']['ClanWarLogEntry'][];
        ClanWarLogEntry: {
            clan?            : components['schemas']['WarClan'];
            opponent?        : components['schemas']['WarClan'];
            teamSize?        : number;
            attacksPerMember?: number;
            /** @enum {string} */
            battleModifier?  : 'NONE' | 'HARD_MODE';
            endTime?         : string;
            /** @enum {string} */
            result?          : 'LOSE' | 'WIN' | 'TIE';
        };
        GoldPassSeason: {
            startTime?: string;
            endTime?  : string;
        };
        DeepLinkCreationRequest: {
            playerTags?     : components['schemas']['StringList'];
            clanTag?        : string;
            opponentClanTag?: string;
        };
        StringList              : string[];
        String                  : Record<string, never>;
        DeepLinkCreationResponse: {
            link?: string;
        };
        ClanWarLeagueGroup: {
            tag?   : string;
            /** @enum {string} */
            state? : 'GROUP_NOT_FOUND' | 'NOT_IN_WAR' | 'PREPARATION' | 'WAR' | 'ENDED';
            season?: string;
            clans? : components['schemas']['ClanWarLeagueClanList'];
            rounds?: components['schemas']['ClanWarLeagueRoundList'];
        };
        ClanWarLeagueRoundList: components['schemas']['ClanWarLeagueRound'][];
        ClanWarLeagueRound: {
            warTags?: components['schemas']['StringList'];
        };
        ClanWarLeagueClanList: components['schemas']['ClanWarLeagueClan'][];
        ClanWarLeagueClan: {
            tag?      : string;
            clanLevel?: number;
            name?     : string;
            members?  : components['schemas']['ClanWarLeagueClanMemberList'];
            badgeUrls?: Record<string, never>;
        };
        ClanWarLeagueClanMemberList: components['schemas']['ClanWarLeagueClanMember'][];
        ClanWarLeagueClanMember: {
            tag?          : string;
            townHallLevel?: number;
            name?         : string;
        };
        ClanRankingList: components['schemas']['ClanRanking'][];
        ClanRanking: {
            clanLevel?   : number;
            clanPoints?  : number;
            location?    : components['schemas']['Location'];
            members?     : number;
            tag?         : string;
            name?        : string;
            rank?        : number;
            previousRank?: number;
            badgeUrls?   : Record<string, never>;
        };
        CapitalLeagueList: components['schemas']['CapitalLeague'][];
        Player: {
            league?                  : components['schemas']['League'];
            builderBaseLeague?       : components['schemas']['BuilderBaseLeague'];
            clan?                    : components['schemas']['PlayerClan'];
            /** @enum {string} */
            role?                    : 'NOT_MEMBER' | 'MEMBER' | 'LEADER' | 'ADMIN' | 'COLEADER';
            /** @enum {string} */
            warPreference?           : 'OUT' | 'IN';
            attackWins?              : number;
            defenseWins?             : number;
            townHallLevel?           : number;
            townHallWeaponLevel?     : number;
            legendStatistics?        : components['schemas']['PlayerLegendStatistics'];
            troops?                  : components['schemas']['PlayerItemLevelList'];
            heroes?                  : components['schemas']['PlayerItemLevelList'];
            heroEquipment?           : components['schemas']['PlayerItemLevelList'];
            spells?                  : components['schemas']['PlayerItemLevelList'];
            labels?                  : components['schemas']['LabelList'];
            tag?                     : string;
            name?                    : string;
            expLevel?                : number;
            trophies?                : number;
            bestTrophies?            : number;
            donations?               : number;
            donationsReceived?       : number;
            builderHallLevel?        : number;
            builderBaseTrophies?     : number;
            bestBuilderBaseTrophies? : number;
            warStars?                : number;
            achievements?            : components['schemas']['PlayerAchievementProgressList'];
            clanCapitalContributions?: number;
            playerHouse?             : components['schemas']['PlayerHouse'];
        };
        PlayerAchievementProgressList: components['schemas']['PlayerAchievementProgress'][];
        PlayerAchievementProgress: {
            stars?         : number;
            value?         : number;
            name?          : components['schemas']['JsonLocalizedName'];
            target?        : number;
            info?          : components['schemas']['JsonLocalizedName'];
            completionInfo?: components['schemas']['JsonLocalizedName'];
            /** @enum {string} */
            village?       : 'HOME_VILLAGE' | 'BUILDER_BASE' | 'CLAN_CAPITAL';
        };
        PlayerItemLevelList: components['schemas']['PlayerItemLevel'][];
        PlayerItemLevel: {
            level?             : number;
            name?              : components['schemas']['JsonLocalizedName'];
            maxLevel?          : number;
            /** @enum {string} */
            village?           : 'HOME_VILLAGE' | 'BUILDER_BASE' | 'CLAN_CAPITAL';
            superTroopIsActive?: boolean;
            equipment?         : components['schemas']['PlayerItemLevelList'];
        };
        PlayerLegendStatistics: {
            legendTrophies?           : number;
            currentSeason?            : components['schemas']['LegendLeagueTournamentSeasonResult'];
            bestBuilderBaseSeason?    : components['schemas']['LegendLeagueTournamentSeasonResult'];
            previousSeason?           : components['schemas']['LegendLeagueTournamentSeasonResult'];
            bestSeason?               : components['schemas']['LegendLeagueTournamentSeasonResult'];
            previousBuilderBaseSeason?: components['schemas']['LegendLeagueTournamentSeasonResult'];
        };
        LegendLeagueTournamentSeasonResult: {
            trophies?: number;
            id?      : string;
            rank?    : number;
        };
        PlayerClan: {
            tag?      : string;
            clanLevel?: number;
            name?     : string;
            badgeUrls?: Record<string, never>;
        };
        ClientError: {
            reason? : string;
            message?: string;
            type?   : string;
            detail? : Record<string, never>;
        };
    };
    responses: {
        /** @description Service is temprorarily unavailable because of maintenance. */
        InMaintenanceSpec: {
            headers: {
                [name: string]: unknown;
            };
            content?: never;
        };
        /** @description Unknown error happened when handling the request. */
        UnknownExceptionSpec: {
            headers: {
                [name: string]: unknown;
            };
            content?: never;
        };
        /** @description Request was throttled, because amount of requests was above the threshold defined for the used API token.
         *      */
        RequestThrottledSpec: {
            headers: {
                [name: string]: unknown;
            };
            content?: never;
        };
        /** @description Resource was not found. */
        NotFoundSpec: {
            headers: {
                [name: string]: unknown;
            };
            content?: never;
        };
        /** @description Access denied, either because of missing/incorrect credentials or used API token does not grant access to the requested resource.
         *      */
        ForbiddenSpec: {
            headers: {
                [name: string]: unknown;
            };
            content?: never;
        };
        /** @description Client provided incorrect parameters for the request. */
        BadRequestSpec: {
            headers: {
                [name: string]: unknown;
            };
            content?: never;
        };
    };
    parameters   : never;
    requestBodies: never;
    headers      : never;
    pathItems    : never;
}
export type $defs = Record<string, never>;
export interface operations {
    getClanWarLeagueGroup: {
        parameters: {
            query? : never;
            header?: never;
            path: {
                /** @description Tag of the clan. */
                clanTag: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            400: components['responses']['BadRequestSpec'];
            403: components['responses']['ForbiddenSpec'];
            404: components['responses']['NotFoundSpec'];
            429: components['responses']['RequestThrottledSpec'];
            500: components['responses']['UnknownExceptionSpec'];
            503: components['responses']['InMaintenanceSpec'];
        };
    };
    getPlayer: {
        parameters: {
            query? : never;
            header?: never;
            path: {
                /** @description Tag of the player. */
                playerTag: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            400: components['responses']['BadRequestSpec'];
            403: components['responses']['ForbiddenSpec'];
            404: components['responses']['NotFoundSpec'];
            429: components['responses']['RequestThrottledSpec'];
            500: components['responses']['UnknownExceptionSpec'];
            503: components['responses']['InMaintenanceSpec'];
        };
    };
    getCapitalLeagues: {
        parameters: {
            query?: {
                /** @description Limit the number of items returned in the response. */
                limit? : string;
                /** @description Return only items that occur after this marker. Before marker can be found from the response, inside the 'paging' property. Note that only after or before can be specified for a request, not both.
                 *      */
                after? : string;
                /** @description Return only items that occur before this marker. Before marker can be found from the response, inside the 'paging' property. Note that only after or before can be specified for a request, not both.
                 *      */
                before?: string;
            };
            header?: never;
            path?  : never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            400: components['responses']['BadRequestSpec'];
            403: components['responses']['ForbiddenSpec'];
            404: components['responses']['NotFoundSpec'];
            429: components['responses']['RequestThrottledSpec'];
            500: components['responses']['UnknownExceptionSpec'];
            503: components['responses']['InMaintenanceSpec'];
        };
    };
    getClanRanking: {
        parameters: {
            query?: {
                /** @description Limit the number of items returned in the response. */
                limit? : string;
                /** @description Return only items that occur after this marker. Before marker can be found from the response, inside the 'paging' property. Note that only after or before can be specified for a request, not both.
                 *      */
                after? : string;
                /** @description Return only items that occur before this marker. Before marker can be found from the response, inside the 'paging' property. Note that only after or before can be specified for a request, not both.
                 *      */
                before?: string;
            };
            header?: never;
            path: {
                /** @description Identifier of the location to retrieve. */
                locationId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            400: components['responses']['BadRequestSpec'];
            403: components['responses']['ForbiddenSpec'];
            404: components['responses']['NotFoundSpec'];
            429: components['responses']['RequestThrottledSpec'];
            500: components['responses']['UnknownExceptionSpec'];
            503: components['responses']['InMaintenanceSpec'];
        };
    };
    getClanWarLeagueWar: {
        parameters: {
            query? : never;
            header?: never;
            path: {
                /** @description Tag of the war. */
                warTag: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            400: components['responses']['BadRequestSpec'];
            403: components['responses']['ForbiddenSpec'];
            404: components['responses']['NotFoundSpec'];
            429: components['responses']['RequestThrottledSpec'];
            500: components['responses']['UnknownExceptionSpec'];
            503: components['responses']['InMaintenanceSpec'];
        };
    };
    getCurrentGoldPassSeason: {
        parameters: {
            query? : never;
            header?: never;
            path?  : never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            400: components['responses']['BadRequestSpec'];
            403: components['responses']['ForbiddenSpec'];
            404: components['responses']['NotFoundSpec'];
            429: components['responses']['RequestThrottledSpec'];
            500: components['responses']['UnknownExceptionSpec'];
            503: components['responses']['InMaintenanceSpec'];
        };
    };
    getClanWarLog: {
        parameters: {
            query?: {
                /** @description Limit the number of items returned in the response. */
                limit? : string;
                /** @description Return only items that occur after this marker. Before marker can be found from the response, inside the 'paging' property. Note that only after or before can be specified for a request, not both.
                 *      */
                after? : string;
                /** @description Return only items that occur before this marker. Before marker can be found from the response, inside the 'paging' property. Note that only after or before can be specified for a request, not both.
                 *      */
                before?: string;
            };
            header?: never;
            path: {
                /** @description Tag of the clan. */
                clanTag: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            400: components['responses']['BadRequestSpec'];
            403: components['responses']['ForbiddenSpec'];
            404: components['responses']['NotFoundSpec'];
            429: components['responses']['RequestThrottledSpec'];
            500: components['responses']['UnknownExceptionSpec'];
            503: components['responses']['InMaintenanceSpec'];
        };
    };
    getLeagues: {
        parameters: {
            query?: {
                /** @description Limit the number of items returned in the response. */
                limit? : string;
                /** @description Return only items that occur after this marker. Before marker can be found from the response, inside the 'paging' property. Note that only after or before can be specified for a request, not both.
                 *      */
                after? : string;
                /** @description Return only items that occur before this marker. Before marker can be found from the response, inside the 'paging' property. Note that only after or before can be specified for a request, not both.
                 *      */
                before?: string;
            };
            header?: never;
            path?  : never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            400: components['responses']['BadRequestSpec'];
            403: components['responses']['ForbiddenSpec'];
            404: components['responses']['NotFoundSpec'];
            429: components['responses']['RequestThrottledSpec'];
            500: components['responses']['UnknownExceptionSpec'];
            503: components['responses']['InMaintenanceSpec'];
        };
    };
    getPlayerRanking: {
        parameters: {
            query?: {
                /** @description Limit the number of items returned in the response. */
                limit? : string;
                /** @description Return only items that occur after this marker. Before marker can be found from the response, inside the 'paging' property. Note that only after or before can be specified for a request, not both.
                 *      */
                after? : string;
                /** @description Return only items that occur before this marker. Before marker can be found from the response, inside the 'paging' property. Note that only after or before can be specified for a request, not both.
                 *      */
                before?: string;
            };
            header?: never;
            path: {
                /** @description Identifier of the location to retrieve. */
                locationId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            400: components['responses']['BadRequestSpec'];
            403: components['responses']['ForbiddenSpec'];
            404: components['responses']['NotFoundSpec'];
            429: components['responses']['RequestThrottledSpec'];
            500: components['responses']['UnknownExceptionSpec'];
            503: components['responses']['InMaintenanceSpec'];
        };
    };
    getLeagueSeasonRankings: {
        parameters: {
            query?: {
                /** @description Limit the number of items returned in the response. */
                limit? : string;
                /** @description Return only items that occur after this marker. Before marker can be found from the response, inside the 'paging' property. Note that only after or before can be specified for a request, not both.
                 *      */
                after? : string;
                /** @description Return only items that occur before this marker. Before marker can be found from the response, inside the 'paging' property. Note that only after or before can be specified for a request, not both.
                 *      */
                before?: string;
            };
            header?: never;
            path: {
                /** @description Identifier of the league. */
                leagueId: string;
                /** @description Identifier of the season. */
                seasonId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            400: components['responses']['BadRequestSpec'];
            403: components['responses']['ForbiddenSpec'];
            404: components['responses']['NotFoundSpec'];
            429: components['responses']['RequestThrottledSpec'];
            500: components['responses']['UnknownExceptionSpec'];
            503: components['responses']['InMaintenanceSpec'];
        };
    };
    getCapitalLeague: {
        parameters: {
            query? : never;
            header?: never;
            path: {
                /** @description Identifier of the league. */
                leagueId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            400: components['responses']['BadRequestSpec'];
            403: components['responses']['ForbiddenSpec'];
            404: components['responses']['NotFoundSpec'];
            429: components['responses']['RequestThrottledSpec'];
            500: components['responses']['UnknownExceptionSpec'];
            503: components['responses']['InMaintenanceSpec'];
        };
    };
    searchClans: {
        parameters: {
            query?: {
                /** @description Search clans by name. If name is used as part of search query, it needs to be at least three characters long. Name search parameter is interpreted as wild card search, so it may appear anywhere in the clan name.
                 *      */
                name?         : string;
                /** @description Filter by clan war frequency */
                warFrequency? : string;
                /** @description Filter by clan location identifier. For list of available locations, refer to getLocations operation.
                 *      */
                locationId?   : string;
                /** @description Filter by minimum number of clan members */
                minMembers?   : string;
                /** @description Filter by maximum number of clan members */
                maxMembers?   : string;
                /** @description Filter by minimum amount of clan points. */
                minClanPoints?: string;
                /** @description Filter by minimum clan level. */
                minClanLevel? : string;
                /** @description Limit the number of items returned in the response. */
                limit?        : string;
                /** @description Return only items that occur after this marker. Before marker can be found from the response, inside the 'paging' property. Note that only after or before can be specified for a request, not both.
                 *      */
                after?        : string;
                /** @description Return only items that occur before this marker. Before marker can be found from the response, inside the 'paging' property. Note that only after or before can be specified for a request, not both.
                 *      */
                before?       : string;
                /** @description Comma separatered list of label IDs to use for filtering results. */
                labelIds?     : string;
            };
            header?: never;
            path?  : never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            400: components['responses']['BadRequestSpec'];
            403: components['responses']['ForbiddenSpec'];
            404: components['responses']['NotFoundSpec'];
            429: components['responses']['RequestThrottledSpec'];
            500: components['responses']['UnknownExceptionSpec'];
            503: components['responses']['InMaintenanceSpec'];
        };
    };
    getBuilderBaseLeague: {
        parameters: {
            query? : never;
            header?: never;
            path: {
                /** @description Identifier of the league. */
                leagueId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            400: components['responses']['BadRequestSpec'];
            403: components['responses']['ForbiddenSpec'];
            404: components['responses']['NotFoundSpec'];
            429: components['responses']['RequestThrottledSpec'];
            500: components['responses']['UnknownExceptionSpec'];
            503: components['responses']['InMaintenanceSpec'];
        };
    };
    getPlayerBuilderBaseRanking: {
        parameters: {
            query?: {
                /** @description Limit the number of items returned in the response. */
                limit? : string;
                /** @description Return only items that occur after this marker. Before marker can be found from the response, inside the 'paging' property. Note that only after or before can be specified for a request, not both.
                 *      */
                after? : string;
                /** @description Return only items that occur before this marker. Before marker can be found from the response, inside the 'paging' property. Note that only after or before can be specified for a request, not both.
                 *      */
                before?: string;
            };
            header?: never;
            path: {
                /** @description Identifier of the location to retrieve. */
                locationId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            400: components['responses']['BadRequestSpec'];
            403: components['responses']['ForbiddenSpec'];
            404: components['responses']['NotFoundSpec'];
            429: components['responses']['RequestThrottledSpec'];
            500: components['responses']['UnknownExceptionSpec'];
            503: components['responses']['InMaintenanceSpec'];
        };
    };
    getClanBuilderBaseRanking: {
        parameters: {
            query?: {
                /** @description Limit the number of items returned in the response. */
                limit? : string;
                /** @description Return only items that occur after this marker. Before marker can be found from the response, inside the 'paging' property. Note that only after or before can be specified for a request, not both.
                 *      */
                after? : string;
                /** @description Return only items that occur before this marker. Before marker can be found from the response, inside the 'paging' property. Note that only after or before can be specified for a request, not both.
                 *      */
                before?: string;
            };
            header?: never;
            path: {
                /** @description Identifier of the location to retrieve. */
                locationId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            400: components['responses']['BadRequestSpec'];
            403: components['responses']['ForbiddenSpec'];
            404: components['responses']['NotFoundSpec'];
            429: components['responses']['RequestThrottledSpec'];
            500: components['responses']['UnknownExceptionSpec'];
            503: components['responses']['InMaintenanceSpec'];
        };
    };
    getCurrentWar: {
        parameters: {
            query? : never;
            header?: never;
            path: {
                /** @description Tag of the clan. */
                clanTag: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            400: components['responses']['BadRequestSpec'];
            403: components['responses']['ForbiddenSpec'];
            404: components['responses']['NotFoundSpec'];
            429: components['responses']['RequestThrottledSpec'];
            500: components['responses']['UnknownExceptionSpec'];
            503: components['responses']['InMaintenanceSpec'];
        };
    };
    getClan: {
        parameters: {
            query? : never;
            header?: never;
            path: {
                /** @description Tag of the clan. */
                clanTag: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            400: components['responses']['BadRequestSpec'];
            403: components['responses']['ForbiddenSpec'];
            404: components['responses']['NotFoundSpec'];
            429: components['responses']['RequestThrottledSpec'];
            500: components['responses']['UnknownExceptionSpec'];
            503: components['responses']['InMaintenanceSpec'];
        };
    };
    verifyToken: {
        parameters: {
            query? : never;
            header?: never;
            path: {
                /** @description Tag of the player. */
                playerTag: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            400: components['responses']['BadRequestSpec'];
            403: components['responses']['ForbiddenSpec'];
            404: components['responses']['NotFoundSpec'];
            429: components['responses']['RequestThrottledSpec'];
            500: components['responses']['UnknownExceptionSpec'];
            503: components['responses']['InMaintenanceSpec'];
        };
    };
    getBuilderBaseLeagues: {
        parameters: {
            query?: {
                /** @description Limit the number of items returned in the response. */
                limit? : string;
                /** @description Return only items that occur after this marker. Before marker can be found from the response, inside the 'paging' property. Note that only after or before can be specified for a request, not both.
                 *      */
                after? : string;
                /** @description Return only items that occur before this marker. Before marker can be found from the response, inside the 'paging' property. Note that only after or before can be specified for a request, not both.
                 *      */
                before?: string;
            };
            header?: never;
            path?  : never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            400: components['responses']['BadRequestSpec'];
            403: components['responses']['ForbiddenSpec'];
            404: components['responses']['NotFoundSpec'];
            429: components['responses']['RequestThrottledSpec'];
            500: components['responses']['UnknownExceptionSpec'];
            503: components['responses']['InMaintenanceSpec'];
        };
    };
    getLeague: {
        parameters: {
            query? : never;
            header?: never;
            path: {
                /** @description Identifier of the league. */
                leagueId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            400: components['responses']['BadRequestSpec'];
            403: components['responses']['ForbiddenSpec'];
            404: components['responses']['NotFoundSpec'];
            429: components['responses']['RequestThrottledSpec'];
            500: components['responses']['UnknownExceptionSpec'];
            503: components['responses']['InMaintenanceSpec'];
        };
    };
    getLeagueSeasons: {
        parameters: {
            query?: {
                /** @description Limit the number of items returned in the response. */
                limit? : string;
                /** @description Return only items that occur after this marker. Before marker can be found from the response, inside the 'paging' property. Note that only after or before can be specified for a request, not both.
                 *      */
                after? : string;
                /** @description Return only items that occur before this marker. Before marker can be found from the response, inside the 'paging' property. Note that only after or before can be specified for a request, not both.
                 *      */
                before?: string;
            };
            header?: never;
            path: {
                /** @description Identifier of the league. */
                leagueId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            400: components['responses']['BadRequestSpec'];
            403: components['responses']['ForbiddenSpec'];
            404: components['responses']['NotFoundSpec'];
            429: components['responses']['RequestThrottledSpec'];
            500: components['responses']['UnknownExceptionSpec'];
            503: components['responses']['InMaintenanceSpec'];
        };
    };
    getClanMembers: {
        parameters: {
            query?: {
                /** @description Limit the number of items returned in the response. */
                limit? : string;
                /** @description Return only items that occur after this marker. Before marker can be found from the response, inside the 'paging' property. Note that only after or before can be specified for a request, not both.
                 *      */
                after? : string;
                /** @description Return only items that occur before this marker. Before marker can be found from the response, inside the 'paging' property. Note that only after or before can be specified for a request, not both.
                 *      */
                before?: string;
            };
            header?: never;
            path: {
                /** @description Tag of the clan. */
                clanTag: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            400: components['responses']['BadRequestSpec'];
            403: components['responses']['ForbiddenSpec'];
            404: components['responses']['NotFoundSpec'];
            429: components['responses']['RequestThrottledSpec'];
            500: components['responses']['UnknownExceptionSpec'];
            503: components['responses']['InMaintenanceSpec'];
        };
    };
    getLocations: {
        parameters: {
            query?: {
                /** @description Limit the number of items returned in the response. */
                limit? : string;
                /** @description Return only items that occur after this marker. Before marker can be found from the response, inside the 'paging' property. Note that only after or before can be specified for a request, not both.
                 *      */
                after? : string;
                /** @description Return only items that occur before this marker. Before marker can be found from the response, inside the 'paging' property. Note that only after or before can be specified for a request, not both.
                 *      */
                before?: string;
            };
            header?: never;
            path?  : never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            400: components['responses']['BadRequestSpec'];
            403: components['responses']['ForbiddenSpec'];
            404: components['responses']['NotFoundSpec'];
            429: components['responses']['RequestThrottledSpec'];
            500: components['responses']['UnknownExceptionSpec'];
            503: components['responses']['InMaintenanceSpec'];
        };
    };
    getPlayerLabels: {
        parameters: {
            query?: {
                /** @description Limit the number of items returned in the response. */
                limit? : string;
                /** @description Return only items that occur after this marker. Before marker can be found from the response, inside the 'paging' property. Note that only after or before can be specified for a request, not both.
                 *      */
                after? : string;
                /** @description Return only items that occur before this marker. Before marker can be found from the response, inside the 'paging' property. Note that only after or before can be specified for a request, not both.
                 *      */
                before?: string;
            };
            header?: never;
            path?  : never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            400: components['responses']['BadRequestSpec'];
            403: components['responses']['ForbiddenSpec'];
            404: components['responses']['NotFoundSpec'];
            429: components['responses']['RequestThrottledSpec'];
            500: components['responses']['UnknownExceptionSpec'];
            503: components['responses']['InMaintenanceSpec'];
        };
    };
    getWarLeague: {
        parameters: {
            query? : never;
            header?: never;
            path: {
                /** @description Identifier of the league. */
                leagueId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            400: components['responses']['BadRequestSpec'];
            403: components['responses']['ForbiddenSpec'];
            404: components['responses']['NotFoundSpec'];
            429: components['responses']['RequestThrottledSpec'];
            500: components['responses']['UnknownExceptionSpec'];
            503: components['responses']['InMaintenanceSpec'];
        };
    };
    getClanCapitalRanking: {
        parameters: {
            query?: {
                /** @description Limit the number of items returned in the response. */
                limit? : string;
                /** @description Return only items that occur after this marker. Before marker can be found from the response, inside the 'paging' property. Note that only after or before can be specified for a request, not both.
                 *      */
                after? : string;
                /** @description Return only items that occur before this marker. Before marker can be found from the response, inside the 'paging' property. Note that only after or before can be specified for a request, not both.
                 *      */
                before?: string;
            };
            header?: never;
            path: {
                /** @description Identifier of the location to retrieve. */
                locationId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            400: components['responses']['BadRequestSpec'];
            403: components['responses']['ForbiddenSpec'];
            404: components['responses']['NotFoundSpec'];
            429: components['responses']['RequestThrottledSpec'];
            500: components['responses']['UnknownExceptionSpec'];
            503: components['responses']['InMaintenanceSpec'];
        };
    };
    getLocation: {
        parameters: {
            query? : never;
            header?: never;
            path: {
                /** @description Identifier of the location to retrieve. */
                locationId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            400: components['responses']['BadRequestSpec'];
            403: components['responses']['ForbiddenSpec'];
            404: components['responses']['NotFoundSpec'];
            429: components['responses']['RequestThrottledSpec'];
            500: components['responses']['UnknownExceptionSpec'];
            503: components['responses']['InMaintenanceSpec'];
        };
    };
    getCapitalRaidSeasons: {
        parameters: {
            query?: {
                /** @description Limit the number of items returned in the response. */
                limit? : string;
                /** @description Return only items that occur after this marker. Before marker can be found from the response, inside the 'paging' property. Note that only after or before can be specified for a request, not both.
                 *      */
                after? : string;
                /** @description Return only items that occur before this marker. Before marker can be found from the response, inside the 'paging' property. Note that only after or before can be specified for a request, not both.
                 *      */
                before?: string;
            };
            header?: never;
            path: {
                /** @description Tag of the clan. */
                clanTag: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            400: components['responses']['BadRequestSpec'];
            403: components['responses']['ForbiddenSpec'];
            404: components['responses']['NotFoundSpec'];
            429: components['responses']['RequestThrottledSpec'];
            500: components['responses']['UnknownExceptionSpec'];
            503: components['responses']['InMaintenanceSpec'];
        };
    };
    getClanLabels: {
        parameters: {
            query?: {
                /** @description Limit the number of items returned in the response. */
                limit? : string;
                /** @description Return only items that occur after this marker. Before marker can be found from the response, inside the 'paging' property. Note that only after or before can be specified for a request, not both.
                 *      */
                after? : string;
                /** @description Return only items that occur before this marker. Before marker can be found from the response, inside the 'paging' property. Note that only after or before can be specified for a request, not both.
                 *      */
                before?: string;
            };
            header?: never;
            path?  : never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            400: components['responses']['BadRequestSpec'];
            403: components['responses']['ForbiddenSpec'];
            404: components['responses']['NotFoundSpec'];
            429: components['responses']['RequestThrottledSpec'];
            500: components['responses']['UnknownExceptionSpec'];
            503: components['responses']['InMaintenanceSpec'];
        };
    };
    getWarLeagues: {
        parameters: {
            query?: {
                /** @description Limit the number of items returned in the response. */
                limit? : string;
                /** @description Return only items that occur after this marker. Before marker can be found from the response, inside the 'paging' property. Note that only after or before can be specified for a request, not both.
                 *      */
                after? : string;
                /** @description Return only items that occur before this marker. Before marker can be found from the response, inside the 'paging' property. Note that only after or before can be specified for a request, not both.
                 *      */
                before?: string;
            };
            header?: never;
            path?  : never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            400: components['responses']['BadRequestSpec'];
            403: components['responses']['ForbiddenSpec'];
            404: components['responses']['NotFoundSpec'];
            429: components['responses']['RequestThrottledSpec'];
            500: components['responses']['UnknownExceptionSpec'];
            503: components['responses']['InMaintenanceSpec'];
        };
    };
}
