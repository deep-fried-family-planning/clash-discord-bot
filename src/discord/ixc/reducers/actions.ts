import {makeId} from '#src/discord/ixc/reducers/build-reducer.ts';
import {RDXK, RDXT} from '#src/discord/ixc/store/types.ts';


/**
 * @desc Action Name (AXN)
 */
export const AXN = {
    LINKS_ENTRY           : makeId(RDXK.ENTRY, RDXT.LINKS),
    LINKS_OPEN            : makeId(RDXK.OPEN, RDXT.LINKS),
    NEW_LINK_OPEN         : makeId(RDXK.OPEN, RDXT.NEW_LINK),
    NEW_LINK_UPDATE       : makeId(RDXK.UPDATE, RDXT.NEW_LINK),
    NEW_LINK_MODAL_OPEN   : makeId(RDXK.MODAL_OPEN, RDXT.NEW_LINK),
    NEW_LINK_MODAL_SUBMIT : makeId(RDXK.MODAL_SUBMIT, RDXT.NEW_LINK),
    ACCOUNTS_OPEN         : makeId(RDXK.OPEN, RDXT.ACCOUNTS),
    ACCOUNTS_SELECT       : makeId(RDXK.START, RDXT.ACCOUNTS),
    ACCOUNTS_SELECT_UPDATE: makeId(RDXK.UPDATE, RDXT.ACCOUNTS),
    ACCOUNT_TYPE_OPEN     : makeId(RDXK.OPEN, RDXT.ACCOUNT_TYPE),
    ACCOUNT_TYPE_UPDATE   : makeId(RDXK.UPDATE, RDXT.ACCOUNT_TYPE),
    ACCOUNT_TYPE_SUBMIT   : makeId(RDXK.SUBMIT, RDXT.ACCOUNT_TYPE),
    ACCOUNT_DELETE_OPEN   : makeId(RDXK.OPEN, RDXT.DELETE_ACCOUNT),
    ACCOUNT_DELETE_SUBMIT : makeId(RDXK.SUBMIT, RDXT.DELETE_ACCOUNT),


    INFO_ENTRY  : makeId(RDXK.ENTRY, RDXT.INFO),
    INFO_OPEN   : makeId(RDXK.OPEN, RDXT.INFO),
    CLANS_OPEN  : makeId(RDXK.OPEN, RDXT.CLAN),
    CLANS_SELECT: makeId(RDXK.SELECT, RDXT.CLAN),
    CLANS_FILTER: makeId(RDXK.FILTER, RDXT.CLAN),


    ROSTER_ENTRY        : makeId(RDXK.ENTRY, RDXT.ROSTER),
    ROSTER_OPEN         : makeId(RDXK.OPEN, RDXT.ROSTER),
    ROSTER_JOIN_OPEN    : makeId(RDXK.OPEN, RDXT.ROSTER_JOIN),
    ROSTER_SELECT_OPEN  : makeId(RDXK.SELECT, RDXT.ROSTER),
    ROSTER_SELECT_FILTER: makeId(RDXK.FILTER, RDXT.ROSTER),
    ROSTER_SELECT_UPDATE: makeId(RDXK.UPDATE, RDXT.ROSTER),


    ROSTER_ADMIN_OPEN   : makeId(RDXK.ADMIN, RDXT.ROSTER),
    ROSTER_CREATE       : makeId(RDXK.CREATE, RDXT.ROSTER),
    ROSTER_CREATE_SUBMIT: makeId(RDXK.SUBMIT, RDXT.ROSTER),
    ROSTER_EDIT         : makeId(RDXK.EDIT, RDXT.ROSTER),
    ROSTER_EDIT_SUBMIT  : makeId(RDXK.SUBMIT, RDXT.ROSTER),
    ROSTER_DELETE       : makeId(RDXK.DELETE, RDXT.ROSTER),
    ROSTER_DELETE_SUBMIT: makeId(RDXK.DELETE, RDXT.ROSTER),


    USER_OPEN           : makeId(RDXK.OPEN, RDXT.USER),
    USER_TIMEZONE_OPEN  : makeId(RDXK.OPEN, RDXT.TIMEZONE),
    USER_TIMEZONE_UPDATE: makeId(RDXK.UPDATE, RDXT.TIMEZONE),
    USER_TIMEZONE_SUBMIT: makeId(RDXK.SUBMIT, RDXT.TIMEZONE),


    FIRST_USER              : makeId(RDXK.FIRST, RDXT.FIRST_USER),
    FIRST_UPDATE_TIMEZONE   : makeId(RDXK.FIRST, RDXT.FIRST_UPDATE_TIMEZONE),
    FIRST_UPDATE_QUIET_START: makeId(RDXK.FIRST, RDXT.FIRST_UPDATE_QUIET_START),
    FIRST_UPDATE_QUIET_END  : makeId(RDXK.FIRST, RDXT.FIRST_UPDATE_QUIET_END),
    FIRST_USER_SUBMIT       : makeId(RDXK.FIRST, RDXT.FIRST_USER_SUBMIT),
    FIRST_ACCOUNT           : makeId(RDXK.FIRST, RDXT.FIRST_ACCOUNT),


    NOOP : makeId(RDXK.NOOP, RDXT.NOOP),
    NOOP1: makeId(RDXK.NOOP, RDXT.NOOP1),
    NOOP2: makeId(RDXK.NOOP, RDXT.NOOP2),
    NOOP3: makeId(RDXK.NOOP, RDXT.NOOP3),


    TAG: makeId(RDXK.TEXT, RDXT.TAG),
    API: makeId(RDXK.TEXT, RDXT.API),
} as const;
